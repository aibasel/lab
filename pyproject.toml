[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "lab"
dynamic = ["version"]
description = "Benchmark your code"
readme = {file = "README.rst", content-type = "text/x-rst"}
keywords = ["benchmarks", "cluster", "grid"]
authors = [
    {name = "Jendrik Seipp", email = "jendrikseipp@gmail.com"},
]
license = {text = "GPL3+"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "matplotlib",  # for scatter plots
    "simplejson",  # optional, speeds up reading properties files
    "txt2tags>=3.6",  # for HTML and Latex reports
]

[project.urls]
Homepage = "https://github.com/aibasel/lab"

[tool.hatch.version]
source = "code"
path = "lab/__init__.py"
expression = "__version__.rstrip('+')"

[tool.hatch.build.targets.wheel]
packages = ["lab"]

[tool.ruff]
exclude = [
  ".git",
  "build",
  "dist",
  ".pytest_cache",
  ".tox",
  ".venv",
  ".vscode",
  # Custom
  "data",
  "external",
  "lab.egg-info",
  "revision-cache",
]

line-length = 88
indent-width = 4

target-version = "py38"

[tool.ruff.lint]
# ruff enables Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
select = [
  "B", # flake8-bugbear
  "C4", # comprehensions
  "E", # pycodestyle
  "F", # pyflakes
  "I001", # isort
  "SIM", # flake8-simplify
  "UP", # pyupgrade
]
ignore = [
  "C408", # unnecessary dict call
  "SIM115", # Use context handler for opening files
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"vulture/whitelists/*.py" = ["B018"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.vulture]
min_confidence = 0
paths = ["lab", "downward", "examples", "tests"]
exclude = ["data"]
